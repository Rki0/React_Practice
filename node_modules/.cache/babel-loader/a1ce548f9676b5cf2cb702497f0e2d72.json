{"ast":null,"code":"// 아니면 이 코드 전체를 createSlice로 전환\n// const GET_POSTS = \"GET_POSTS\";\n// // 이 부분을 createAction으로 전환\n// export const getPosts = (post) => ({\n//   type: GET_POSTS,\n//   payload: post,\n// });\n// const initialState = {\n//   posts: [],\n// };\n// // 이 부분을 createReducer로 전환\n// export default function Post(state = initialState, action) {\n//   switch (action.type) {\n//     case GET_POSTS:\n//       return {\n//         ...state,\n//         posts: action.payload,\n//       };\n//     default:\n//       return state;\n//   }\n// }\n////////////////////////////////\n////////////////////////////////\n// // createAction과 createReducer 활용\n// // 이건 실패함...\n// import { createAction, createReducer } from \"@reduxjs/toolkit\";\n// // createAction\n// export const getPosts = createAction(\"post/GET_POSTS\", function prepare(post) {\n//   return {\n//     payload: post,\n//   };\n// });\n// const initialState = {\n//   posts: [],\n// };\n// // createReducer\n// const Post = createReducer(initialState, {\n//   [getPosts]: (state, action) => (state.posts = action.payload),\n// });\n// export default Post;\n////////////////////////////////\n////////////////////////////////\n// createSlice 활용\n// 액션과 리듀서를 합쳐서 사용 가능\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { onRequest } from \"../common/axios\";\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const reponse = await onRequest(\"/posts\");\n\n  if (reponse.data === 200) {\n    return reponse.data;\n  } else {}\n});\nexport const postSlice = createSlice({\n  // store에 저장할 이름\n  name: \"post\",\n  // 초기 상태\n  initialState: {\n    posts: []\n  },\n  // 액션과 리듀서가 들어가는 부분\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.posts = action.payload;\n    });\n  }\n}); // 액션 함수, 리듀서 내보내기. 이것도 문법적인거라 기억!\n\nexport const {\n  getPosts\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["/Users/gimtaewon/Documents/frontend/React_Practice/src/Redux/Post.js"],"names":["createAsyncThunk","createSlice","onRequest","fetchPosts","reponse","data","postSlice","name","initialState","posts","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","getPosts","actions","reducer"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AACzE,QAAMI,OAAO,GAAG,MAAMF,SAAS,CAAC,QAAD,CAA/B;;AACA,MAAIE,OAAO,CAACC,IAAR,KAAiB,GAArB,EAA0B;AACxB,WAAOD,OAAO,CAACC,IAAf;AACD,GAFD,MAEO,CACN;AACF,CANyC,CAAnC;AAQP,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;AACnC;AACAM,EAAAA,IAAI,EAAE,MAF6B;AAInC;AACAC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GALqB;AASnC;AACAC,EAAAA,QAAQ,EAAE,EAVyB;AAWnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,UAAU,CAACW,SAA3B,EAAsC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvDD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;AACD,KAFD;AAGD;AAfkC,CAAD,CAA7B,C,CAkBP;;AACA,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAeZ,SAAS,CAACa,OAA/B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["// 아니면 이 코드 전체를 createSlice로 전환\n\n// const GET_POSTS = \"GET_POSTS\";\n\n// // 이 부분을 createAction으로 전환\n// export const getPosts = (post) => ({\n//   type: GET_POSTS,\n//   payload: post,\n// });\n\n// const initialState = {\n//   posts: [],\n// };\n\n// // 이 부분을 createReducer로 전환\n// export default function Post(state = initialState, action) {\n//   switch (action.type) {\n//     case GET_POSTS:\n//       return {\n//         ...state,\n//         posts: action.payload,\n//       };\n\n//     default:\n//       return state;\n//   }\n// }\n\n////////////////////////////////\n////////////////////////////////\n\n// // createAction과 createReducer 활용\n// // 이건 실패함...\n// import { createAction, createReducer } from \"@reduxjs/toolkit\";\n\n// // createAction\n// export const getPosts = createAction(\"post/GET_POSTS\", function prepare(post) {\n//   return {\n//     payload: post,\n//   };\n// });\n\n// const initialState = {\n//   posts: [],\n// };\n\n// // createReducer\n// const Post = createReducer(initialState, {\n//   [getPosts]: (state, action) => (state.posts = action.payload),\n// });\n\n// export default Post;\n\n////////////////////////////////\n////////////////////////////////\n\n// createSlice 활용\n// 액션과 리듀서를 합쳐서 사용 가능\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { onRequest } from \"../common/axios\";\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const reponse = await onRequest(\"/posts\");\n  if (reponse.data === 200) {\n    return reponse.data;\n  } else {\n  }\n});\n\nexport const postSlice = createSlice({\n  // store에 저장할 이름\n  name: \"post\",\n\n  // 초기 상태\n  initialState: {\n    posts: [],\n  },\n\n  // 액션과 리듀서가 들어가는 부분\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchPosts.fulfilled, (state, action) => {\n      state.posts = action.payload;\n    });\n  },\n});\n\n// 액션 함수, 리듀서 내보내기. 이것도 문법적인거라 기억!\nexport const { getPosts } = postSlice.actions;\nexport default postSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}